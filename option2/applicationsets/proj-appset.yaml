apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  # The name of Application.
  name: proj-apps
  # You'll usually want to add your resources to the argocd namespace.
  namespace: argocd
  # Add this finalizer ONLY if you want these to cascade delete.
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  # Add labels to your application object.
  labels:
    name: proj-apps
spec:
  generators:
    - git:
        repoURL: https://github.com/sadoha/ArgoCD.git
        revision: HEAD
        directories:
          - path: option2/applications/values/*/*
  template:
    metadata:
      namespace: argocd
      name: "{{path[3]}}-{{path.basename}}"
    spec:
      # The project the application belongs to.
      project: default
      # Source of the application manifests.
      sources:
      # Can point to either a Helm chart repo or a git repo.
      - repoURL: https://github.com/sadoha/ArgoCD.git
        # For Helm, this refers to the chart version.
        targetRevision: HEAD
        # This has no meaning for Helm charts pulled directly from a Helm repo ins tead of git.
        path: helm/app
        helm:
          valueFiles:
          - $values/option2/applications/values/{{path[3]}}/{{path.basename}}/values.yaml
      # Can point to either a Helm chart repo or a git repo.
      - repoURL: 'https://github.com/sadoha/ArgoCD.git'
        # For Helm, this refers to the chart version.
        targetRevision: HEAD
        # Sources with the ref field set must not also specify the chart field. 
        # Argo CD does not currently support using another Helm chart as a source for value files.
        ref: values
      # Destination cluster and namespace to deploy the application
      destination:
        # The namespace will only be set for namespace-scoped resources that 
        # have not set a value for .metadata.namespace
        namespace: "{{path.basename}}"
        # cluster API URL
        server: https://kubernetes.default.svc
      # Sync policy  
      syncPolicy:
        # automated sync by default retries failed attempts 5 times with following delays 
        # between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
        automated:
          # Specifies if resources should be pruned during auto-syncing ( false by default ).
          prune: true
          # Specifies if partial app sync should be executed when resources are changed only 
          # in target Kubernetes cluster and no git change detected ( false by default ).
          selfHeal: true
        # Sync options which modifies sync behavior
        syncOptions:
          # Namespace Auto-Creation ensures that namespace specified as the application 
          # destination exists in the destination cluster.
          - CreateNamespace=true
        # Sets the metadata for the application namespace. Only valid if CreateNamespace=true (see above),
        # otherwise it's a no-op.
        managedNamespaceMetadata: 
          # The labels to set on the application namespace
          labels:
            project: "{{path[3]}}-{{path.basename}}"
          # The labels to set on the application namespace
          annotations:
            annotations: "{{path[3]}}-{{path.basename}}"
        # The retry feature is available since v1.7
        retry:
          # number of failed sync attempt retries; unlimited number of attempts if less than 0
          limit: 5
          backoff:
            # the amount to back off. Default unit is seconds, 
            # but could also be a duration (e.g. "2m", "1h")
            duration: 5s
            # a factor to multiply the base duration after each failed retry
            factor: 2
            # the maximum amount of time allowed for the backoff strategy
            maxDuration: 3m0s
